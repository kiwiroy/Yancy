[![Build Status](https://travis-ci.org/preaction/Yancy.svg?branch=master)](https://travis-ci.org/preaction/Yancy)
[![Coverage Status](https://coveralls.io/repos/preaction/Yancy/badge.svg?branch=master)](https://coveralls.io/r/preaction/Yancy?branch=master)

# NAME

Yancy - The Best Web Framework Deserves the Best CMS

# VERSION

version 1.065

# SYNOPSIS

    use Mojolicious::Lite;
    use Mojo::Pg; # Supported backends: Mojo::Pg, Mojo::mysql, Mojo::SQLite, DBIx::Class
    plugin Yancy => {
        backend => { Pg => Mojo::Pg->new( 'postgres:///myapp' ) },
        read_schema => 1,
    };

# DESCRIPTION

<div>
    <div style="display: flex">
    <div style="margin: 3px; flex: 1 1 50%">
    <img alt="Screenshot of list of Futurama characters" src="https://raw.github.com/preaction/Yancy/master/eg/doc-site/public/screenshot.png?raw=true" style="max-width: 100%" width="600">
    </div>
    <div style="margin: 3px; flex: 1 1 50%">
    <img alt="Screenshot of editing form for a person" src="https://raw.github.com/preaction/Yancy/master/eg/doc-site/public/screenshot-edit.png?raw=true" style="max-width: 100%" width="600">
    </div>
    </div>
</div>

[Yancy](https://metacpan.org/pod/Yancy) is a simple content management system (CMS) for administering
content in a database. Yancy accepts a configuration file that describes
the data in the database, builds a website that lists all of the
available data, and allows a user to edit data, delete data, and add new
data.

Yancy uses [JSON Schema](http://json-schema.org) to describe the data in
a database and configure forms and applications. The schema is added to
an [OpenAPI specification](http://openapis.org) which creates a [REST
API](https://en.wikipedia.org/wiki/Representational_state_transfer) for
your data.

Yancy can be run in a standalone mode (which can be placed behind
a proxy), or can be embedded as a plugin into any application that uses
the [Mojolicious](https://metacpan.org/pod/Mojolicious) web framework.

Yancy can manage data in multiple databases using different backends
([Yancy::Backend](https://metacpan.org/pod/Yancy::Backend) modules). Backends exist for [Postgres via
Mojo::Pg](https://metacpan.org/pod/Yancy::Backend::Pg), [MySQL via
Mojo::mysql](https://metacpan.org/pod/Yancy::Backend::Mysql), [SQLite via
Mojo::SQLite](https://metacpan.org/pod/Yancy::Backend::Sqlite), [DBIx::Class, a Perl
ORM](https://metacpan.org/pod/Yancy::Backend::Dbic), and even [static YAML and Markdown files
using Yancy::Backend::Static](https://metacpan.org/pod/Yancy::Backend::Static).

## Mojolicious Plugin

Yancy is primarily a Mojolicious plugin to ease development and
management of Mojolicious applications. Yancy provides:

- An [administrative application](https://metacpan.org/pod/Yancy::Plugin::Editor) that allows
editing and managing your site's content. This app is highly
customizable using additional JavaScript.
- [Controllers](https://metacpan.org/pod/Yancy::Controller::Yancy) which you can use to easily
[list data](https://metacpan.org/pod/Yancy::Controller::Yancy#list), [display
data](https://metacpan.org/pod/Yancy::Controller::Yancy#get), [modify
data](https://metacpan.org/pod/Yancy::Controller::Yancy#set), and [delete
data](https://metacpan.org/pod/Yancy::Controller::Yancy#delete).
- [Helpers](https://metacpan.org/pod/Mojolicious::Plugin::Yancy#HELPERS) to access data, validate
forms
- [Templates](https://metacpan.org/pod/Mojolicious::Plugin::Yancy#TEMPLATES) which you can override
to customize the Yancy editor's appearance

For information on how to use Yancy as a Mojolicious plugin, see
[Mojolicious::Plugin::Yancy](https://metacpan.org/pod/Mojolicious::Plugin::Yancy).

## Example Applications

The [Yancy Git repository on Github](http://github.com/preaction/Yancy)
includes some example applications you can use to help build your own
websites. [View the example application directory](https://github.com/preaction/Yancy/tree/master/eg).

## Yancy Plugins

Yancy comes with plugins to enhance your website.

- [The Editor plugin](https://metacpan.org/pod/Yancy::Plugin::Editor) allows for customization of
the Yancy editor application, including adding your own components and
editors.
- [The File plugin](https://metacpan.org/pod/Yancy::Plugin::File) manages files uploaded to the
site via the [editor](https://metacpan.org/pod/Yancy::Plugin::Editor) or via
a [controller](https://metacpan.org/pod/Yancy::Controller::Yancy).
- [The Auth plugin](https://metacpan.org/pod/Yancy::Plugin::Auth) provides an API that allows you
to enable multiple authentication mechanisms for your site, including
[users creating website accounts](https://metacpan.org/pod/Yancy::Plugin::Auth::Password), or
users using their [Github login](https://metacpan.org/pod/Yancy::Plugin::Auth::Github) or other
[OAuth2 authentication](https://metacpan.org/pod/Yancy::Plugin::Auth::OAuth2).
- [The Form plugin](https://metacpan.org/pod/Yancy::Plugin::Form) can generate forms for the
configured schema, or for individual fields. There are included
form generators for [Bootstrap 4](https://metacpan.org/pod/Yancy::Plugin::Form::Bootstrap4).

More development will be happening here soon!

## Standalone App

Yancy can also be run as a standalone app in the event one wants to
develop applications solely using Mojolicious templates. For
information on how to run Yancy as a standalone application, see
[Yancy::Help::Standalone](https://metacpan.org/pod/Yancy::Help::Standalone).

## REST API

This application creates a REST API using the standard
[OpenAPI](http://openapis.org) API specification. The API spec document
is located at `/yancy/api`.

## Internationalization

Yancy is working on support for translating all internal text. See [Yancy::I18N](https://metacpan.org/pod/Yancy::I18N)
for more information. Translations and other help will be greatly appreciated!

# GUIDES

- [Yancy::Help::Config](https://metacpan.org/pod/Yancy::Help::Config) - How to configure Yancy
- [Yancy::Help::Auth](https://metacpan.org/pod/Yancy::Help::Auth) - How to authenticate and authorize users
- [Yancy::Help::Standalone](https://metacpan.org/pod/Yancy::Help::Standalone) - How to use Yancy without writing code
- [Yancy::Help::Upgrading](https://metacpan.org/pod/Yancy::Help::Upgrading) - How to upgrade from previous versions
- [Yancy::Help::Cookbook](https://metacpan.org/pod/Yancy::Help::Cookbook) - How to cook various apps with Yancy

# BUNDLED PROJECTS

This project bundles some other projects with the following licenses:

- [jQuery](http://jquery.com) (version 3.2.1) Copyright JS Foundation and other contributors (MIT License)
- [Bootstrap](http://getbootstrap.com) (version 4.3.1) Copyright 2011-2019 the Bootstrap Authors and Twitter, Inc. (MIT License)
- [Popper.js](https://popper.js.org) (version 1.13.0) Copyright 2017 Federico Zivolo (MIT License)
- [FontAwesome](http://fontawesome.io) (version 4.7.0) Copyright Dave Gandy (SIL OFL 1.1 and MIT License)
- [Vue.js](http://vuejs.org) (version 2.5.3) Copyright 2013-2018, Yuxi (Evan) You (MIT License)
- [marked](https://github.com/chjj/marked) (version 0.3.12) Copyright 2011-2018, Christopher Jeffrey (MIT License)

The bundled versions of these modules may change. If you rely on these in your own app,
be sure to watch the changelog for version updates.

# SEE ALSO

[JSON schema](http://json-schema.org), [Mojolicious](https://metacpan.org/pod/Mojolicious)

# AUTHOR

Doug Bell <preaction@cpan.org>

# CONTRIBUTORS

- Boris Däppen <bdaeppen.perl@gmail.com>
- Ed J <mohawk2@users.noreply.github.com>
- Erik Johansen <uniejo@users.noreply.github.com>
- Josh Rabinowitz <joshr@joshr.com>
- Mohammad S Anwar <mohammad.anwar@yahoo.com>
- Pavel Serikov <pavelsr@cpan.org>
- Rajesh Mallah <mallah.rajesh@gmail.com>
- William Lindley <wlindley@wlindley.com>
- Wojtek Bażant &lt;wojciech.bazant+ebi@gmail.com>

# COPYRIGHT AND LICENSE

This software is copyright (c) 2020 by Doug Bell.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
